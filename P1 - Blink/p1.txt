// Holly Allen
// Project 1: Blink
// 9/27/2022

// Pins
// Switch
const int switchPin = 9;

// Ultrasonic
/*const int trigPin = 3;
const int echoPin = 2;
volatile boolean sonarOn = false;*/

// LEDs
const int ledPin1 = 5;
const int ledPin2 = 6;
const int ledPin3 = 7;

// Time between flashes
long timeBetween = 1000;
long timeElapsed = 0;
long lastMilSec = 0;

// States
int switchState = 0;

void setup() {
  // LEDs
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);

  // Switch
  pinMode(switchPin, INPUT);
  
  // Ultrasonic
  /*pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);*/

  Serial.begin(9600);
  //delay(100);

  // If the switch changes values, stop/start sonar
  //attachInterrupt(digitalPinToInterrupt(switchPin), updateSonar, CHANGE);
  randomSeed(analogRead(0));
}

void loop() {
  switchState = digitalRead(switchPin);
  long currentMilSec = millis();

  // If the switch is on, modify time from ultrasonic
  /*if (sonarOn)
  {
    unsigned long duration = getSonar();
    long newTime = duration / 100;
    if (newTime != timeBetween)
    {
      timeBetween = newTime;
    }
  }*/

  // If switch on, modify time randomly
  if (switchState == HIGH)
  {
    long newTime = random(50, 500);
    if (newTime != timeBetween)
    {
      timeBetween == newTime;
    }
  }

  // Check the time
  // LED 1 Flash
  if (timeElapsed >= timeBetween)
  {
    digitalWrite(ledPin1, HIGH);
  }
  // LED 2 Flash
  if (timeElapsed >= timeBetween * 2)
  {
    digitalWrite(ledPin2, HIGH);
    digitalWrite(ledPin1, LOW);
  }
  // LED 3 Flash
  if (timeElapsed >= timeBetween * 3)
  {
    digitalWrite(ledPin3, HIGH);
    digitalWrite(ledPin2, LOW);
  }
  if (timeElapsed >= timeBetween * 4)
  {
    digitalWrite(ledPin3, LOW);
    timeElapsed = 0;
  }

  // Increment the time
  timeElapsed += currentMilSec - lastMilSec;
  lastMilSec = currentMilSec;
}

/*void updateSonar()
{
  sonarOn = digitalRead(switchPin) == HIGH;
}

// Read sonar sensor
unsigned long getSonar()
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(3);

  // Read sonar, no interruptions
  noInterrupts();

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  unsigned long duration = pulseIn(echoPin, HIGH);

  interrupts();

  return duration;
}*/